/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---
* import {
*     MoveCommand,
*     Direction,
*     } from './commands';
* ---
* start := moveCommand
* space := ' '
* moveCommand := 'move' space direction=direction
*     .command = MoveCommand {return new MoveCommand(this.direction.value);}
* direction := north | south | east | west
* north := text='north' .value = Direction {return Direction.NORTH;} | text='n' .value = Direction {return Direction.NORTH;}
* south := text='south' .value = Direction {return Direction.NORTH;} | text='s' .value = Direction {return Direction.NORTH;}
* east := text='east' .value = Direction {return Direction.NORTH;} | text='e' .value = Direction {return Direction.NORTH;}
* west := text='west' .value = Direction {return Direction.NORTH;} | text='w' .value = Direction {return Direction.NORTH;}
*/

import {
    MoveCommand,
    Direction,
    } from './commands';

type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    space = "space",
    moveCommand = "moveCommand",
    direction_1 = "direction_1",
    direction_2 = "direction_2",
    direction_3 = "direction_3",
    direction_4 = "direction_4",
    north_1 = "north_1",
    north_2 = "north_2",
    south_1 = "south_1",
    south_2 = "south_2",
    east_1 = "east_1",
    east_2 = "east_2",
    west_1 = "west_1",
    west_2 = "west_2",
}
export type start = moveCommand;
export type space = string;
export class moveCommand {
    public kind: ASTKinds.moveCommand = ASTKinds.moveCommand;
    public direction: direction;
    public command: MoveCommand;
    constructor(direction: direction){
        this.direction = direction;
        this.command = ((): MoveCommand => {
        return new MoveCommand(this.direction.value);
        })();
    }
}
export type direction = direction_1 | direction_2 | direction_3 | direction_4;
export type direction_1 = north;
export type direction_2 = south;
export type direction_3 = east;
export type direction_4 = west;
export type north = north_1 | north_2;
export class north_1 {
    public kind: ASTKinds.north_1 = ASTKinds.north_1;
    public text: string;
    public value: Direction;
    constructor(text: string){
        this.text = text;
        this.value = ((): Direction => {
        return Direction.NORTH;
        })();
    }
}
export class north_2 {
    public kind: ASTKinds.north_2 = ASTKinds.north_2;
    public text: string;
    public value: Direction;
    constructor(text: string){
        this.text = text;
        this.value = ((): Direction => {
        return Direction.NORTH;
        })();
    }
}
export type south = south_1 | south_2;
export class south_1 {
    public kind: ASTKinds.south_1 = ASTKinds.south_1;
    public text: string;
    public value: Direction;
    constructor(text: string){
        this.text = text;
        this.value = ((): Direction => {
        return Direction.NORTH;
        })();
    }
}
export class south_2 {
    public kind: ASTKinds.south_2 = ASTKinds.south_2;
    public text: string;
    public value: Direction;
    constructor(text: string){
        this.text = text;
        this.value = ((): Direction => {
        return Direction.NORTH;
        })();
    }
}
export type east = east_1 | east_2;
export class east_1 {
    public kind: ASTKinds.east_1 = ASTKinds.east_1;
    public text: string;
    public value: Direction;
    constructor(text: string){
        this.text = text;
        this.value = ((): Direction => {
        return Direction.NORTH;
        })();
    }
}
export class east_2 {
    public kind: ASTKinds.east_2 = ASTKinds.east_2;
    public text: string;
    public value: Direction;
    constructor(text: string){
        this.text = text;
        this.value = ((): Direction => {
        return Direction.NORTH;
        })();
    }
}
export type west = west_1 | west_2;
export class west_1 {
    public kind: ASTKinds.west_1 = ASTKinds.west_1;
    public text: string;
    public value: Direction;
    constructor(text: string){
        this.text = text;
        this.value = ((): Direction => {
        return Direction.NORTH;
        })();
    }
}
export class west_2 {
    public kind: ASTKinds.west_2 = ASTKinds.west_2;
    public text: string;
    public value: Direction;
    constructor(text: string){
        this.text = text;
        this.value = ((): Direction => {
        return Direction.NORTH;
        })();
    }
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.matchmoveCommand($$dpth + 1, $$cr);
    }
    public matchspace($$dpth: number, $$cr?: ErrorTracker): Nullable<space> {
        return this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr);
    }
    public matchmoveCommand($$dpth: number, $$cr?: ErrorTracker): Nullable<moveCommand> {
        return this.run<moveCommand>($$dpth,
            () => {
                let $scope$direction: Nullable<direction>;
                let $$res: Nullable<moveCommand> = null;
                if (true
                    && this.regexAccept(String.raw`(?:move)`, $$dpth + 1, $$cr) !== null
                    && this.matchspace($$dpth + 1, $$cr) !== null
                    && ($scope$direction = this.matchdirection($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new moveCommand($scope$direction);
                }
                return $$res;
            });
    }
    public matchdirection($$dpth: number, $$cr?: ErrorTracker): Nullable<direction> {
        return this.choice<direction>([
            () => this.matchdirection_1($$dpth + 1, $$cr),
            () => this.matchdirection_2($$dpth + 1, $$cr),
            () => this.matchdirection_3($$dpth + 1, $$cr),
            () => this.matchdirection_4($$dpth + 1, $$cr),
        ]);
    }
    public matchdirection_1($$dpth: number, $$cr?: ErrorTracker): Nullable<direction_1> {
        return this.matchnorth($$dpth + 1, $$cr);
    }
    public matchdirection_2($$dpth: number, $$cr?: ErrorTracker): Nullable<direction_2> {
        return this.matchsouth($$dpth + 1, $$cr);
    }
    public matchdirection_3($$dpth: number, $$cr?: ErrorTracker): Nullable<direction_3> {
        return this.matcheast($$dpth + 1, $$cr);
    }
    public matchdirection_4($$dpth: number, $$cr?: ErrorTracker): Nullable<direction_4> {
        return this.matchwest($$dpth + 1, $$cr);
    }
    public matchnorth($$dpth: number, $$cr?: ErrorTracker): Nullable<north> {
        return this.choice<north>([
            () => this.matchnorth_1($$dpth + 1, $$cr),
            () => this.matchnorth_2($$dpth + 1, $$cr),
        ]);
    }
    public matchnorth_1($$dpth: number, $$cr?: ErrorTracker): Nullable<north_1> {
        return this.run<north_1>($$dpth,
            () => {
                let $scope$text: Nullable<string>;
                let $$res: Nullable<north_1> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:north)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new north_1($scope$text);
                }
                return $$res;
            });
    }
    public matchnorth_2($$dpth: number, $$cr?: ErrorTracker): Nullable<north_2> {
        return this.run<north_2>($$dpth,
            () => {
                let $scope$text: Nullable<string>;
                let $$res: Nullable<north_2> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new north_2($scope$text);
                }
                return $$res;
            });
    }
    public matchsouth($$dpth: number, $$cr?: ErrorTracker): Nullable<south> {
        return this.choice<south>([
            () => this.matchsouth_1($$dpth + 1, $$cr),
            () => this.matchsouth_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsouth_1($$dpth: number, $$cr?: ErrorTracker): Nullable<south_1> {
        return this.run<south_1>($$dpth,
            () => {
                let $scope$text: Nullable<string>;
                let $$res: Nullable<south_1> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:south)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new south_1($scope$text);
                }
                return $$res;
            });
    }
    public matchsouth_2($$dpth: number, $$cr?: ErrorTracker): Nullable<south_2> {
        return this.run<south_2>($$dpth,
            () => {
                let $scope$text: Nullable<string>;
                let $$res: Nullable<south_2> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:s)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new south_2($scope$text);
                }
                return $$res;
            });
    }
    public matcheast($$dpth: number, $$cr?: ErrorTracker): Nullable<east> {
        return this.choice<east>([
            () => this.matcheast_1($$dpth + 1, $$cr),
            () => this.matcheast_2($$dpth + 1, $$cr),
        ]);
    }
    public matcheast_1($$dpth: number, $$cr?: ErrorTracker): Nullable<east_1> {
        return this.run<east_1>($$dpth,
            () => {
                let $scope$text: Nullable<string>;
                let $$res: Nullable<east_1> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:east)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new east_1($scope$text);
                }
                return $$res;
            });
    }
    public matcheast_2($$dpth: number, $$cr?: ErrorTracker): Nullable<east_2> {
        return this.run<east_2>($$dpth,
            () => {
                let $scope$text: Nullable<string>;
                let $$res: Nullable<east_2> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new east_2($scope$text);
                }
                return $$res;
            });
    }
    public matchwest($$dpth: number, $$cr?: ErrorTracker): Nullable<west> {
        return this.choice<west>([
            () => this.matchwest_1($$dpth + 1, $$cr),
            () => this.matchwest_2($$dpth + 1, $$cr),
        ]);
    }
    public matchwest_1($$dpth: number, $$cr?: ErrorTracker): Nullable<west_1> {
        return this.run<west_1>($$dpth,
            () => {
                let $scope$text: Nullable<string>;
                let $$res: Nullable<west_1> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:west)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new west_1($scope$text);
                }
                return $$res;
            });
    }
    public matchwest_2($$dpth: number, $$cr?: ErrorTracker): Nullable<west_2> {
        return this.run<west_2>($$dpth,
            () => {
                let $scope$text: Nullable<string>;
                let $$res: Nullable<west_2> = null;
                if (true
                    && ($scope$text = this.regexAccept(String.raw`(?:w)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new west_2($scope$text);
                }
                return $$res;
            });
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}