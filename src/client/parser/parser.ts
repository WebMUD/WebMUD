/* AutoGenerated Code, changes may be overwritten
 * INPUT GRAMMAR:
 * ---
 * import {
 *     MoveCommand,
 *     Direction,
 *     Item,
 *     HelpCommand,
 *     CommandName,
 *     ExitCommand,
 *     InventoryCommand,
 *     SayCommand,
 *     WhisperCommand,
 *     LookCommand,
 *     TakeCommand,
 *     DropCommand,
 *     } from './commands';
 * ---
 * start := commands
 * commands := moveCommand | helpCommand | exitCommand | inventoryCommand | sayCommand | whisperCommand |
 * lookCommand | takeCommand | dropCommand
 * space := ' '
 * dropCommand := dropKeyword=dropKeyword space text=word .command =  DropCommand {return new DropCommand(text);}
 * dropKeyword := 'drop'
 * takeCommand := takeKeyword=takeKeyword space text=word .command =  TakeCommand {return new TakeCommand(text);}
 * takeKeyword := 'take'
 * lookCommand :=   lookKeyword=lookKeyword space text=word .command =  LookCommand {return new LookCommand(text);} |
 *                     lookKeyword=lookKeyword .command = LookCommand {return new LookCommand("");}
 *
 * lookKeyword := 'look'
 * whisperCommand := whisperKeyword=whisperKeyword space username = oneWord space text=word .command =  WhisperCommand {return new WhisperCommand(text, username);}
 * whisperKeyword := 'whisper' | 'w'
 * word:='.+'
 * oneWord:='\S+'
 * sayCommand := sayKeyword=sayKeyword space text=word .command = SayCommand {return new SayCommand(text);}
 * sayKeyword := 'say' | 's'
 * inventoryCommand := inventoryKeyword=inventoryKeyword .command = InventoryCommand {return new InventoryCommand();}
 * inventoryKeyword := 'inventory' | 'i'
 * exitCommand := exitKeyword=exitKeyword .command = ExitCommand {return new ExitCommand();}
 * exitKeyword := 'exit' | 'exits'
 * //helpCommand grammar
 * helpKeyword := 'help' | 'h'
 * helpCommand := helpKeyword space commandName=commandName
 *     .command = HelpCommand {return new HelpCommand(this.commandName.value);} |
 *     helpKeyword commandName=commandName
 *     .command = HelpCommand {return new HelpCommand(this.commandName.value);}
 * commandName := move | exit | take | drop | say | inventory | whisper | help
 * //name of commands for the help command
 * move := text='move' .value = CommandName {return CommandName.MOVE;} |
 *     text='m' .value = CommandName {return CommandName.MOVE;}
 * exit := text='exit' .value = CommandName {return CommandName.EXIT;} |
 *     text='exits' .value = CommandName {return CommandName.EXIT;} |
 *     text='e' .value = CommandName {return CommandName.EXIT;}
 * take := text='take' .value = CommandName {return CommandName.TAKE;} |
 *     text='t' .value = CommandName {return CommandName.TAKE;}
 * drop := text='drop' .value = CommandName {return CommandName.DROP;} |
 *     text='d' .value = CommandName {return CommandName.DROP;}
 * say := text='say' .value = CommandName {return CommandName.SAY;} |
 *     text='s' .value = CommandName {return CommandName.SAY;}
 * inventory := text='inventory' .value = CommandName {return CommandName.INVENTORY;} |
 *     text='i' .value = CommandName {return CommandName.INVENTORY;}
 * whisper := text='whisper' .value = CommandName {return CommandName.WHISPER;} |
 *     text='w' .value = CommandName {return CommandName.WHISPER;}
 * look := text='look' .value = CommandName {return CommandName.LOOK;}
 * help := text='' .value = CommandName {return CommandName.HELP;}
 *
 * item :=
 *    text='test' .value = Item {return Item.ITEM_TEST;}
 * moveCommand :=
 *     moveKeyword space text=word
 *     .command = MoveCommand {return new MoveCommand(text);}
 * moveKeyword := 'move' | 'm'
 */

import {
  MoveCommand,
  Direction,
  Item,
  HelpCommand,
  CommandName,
  ExitCommand,
  InventoryCommand,
  SayCommand,
  WhisperCommand,
  LookCommand,
  TakeCommand,
  DropCommand,
} from './commands';

type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
  kind: ASTKinds;
}
export enum ASTKinds {
  start = 'start',
  commands_1 = 'commands_1',
  commands_2 = 'commands_2',
  commands_3 = 'commands_3',
  commands_4 = 'commands_4',
  commands_5 = 'commands_5',
  commands_6 = 'commands_6',
  commands_7 = 'commands_7',
  commands_8 = 'commands_8',
  commands_9 = 'commands_9',
  space = 'space',
  dropCommand = 'dropCommand',
  dropKeyword = 'dropKeyword',
  takeCommand = 'takeCommand',
  takeKeyword = 'takeKeyword',
  lookCommand_1 = 'lookCommand_1',
  lookCommand_2 = 'lookCommand_2',
  lookKeyword = 'lookKeyword',
  whisperCommand = 'whisperCommand',
  whisperKeyword_1 = 'whisperKeyword_1',
  whisperKeyword_2 = 'whisperKeyword_2',
  word = 'word',
  oneWord = 'oneWord',
  sayCommand = 'sayCommand',
  sayKeyword_1 = 'sayKeyword_1',
  sayKeyword_2 = 'sayKeyword_2',
  inventoryCommand = 'inventoryCommand',
  inventoryKeyword_1 = 'inventoryKeyword_1',
  inventoryKeyword_2 = 'inventoryKeyword_2',
  exitCommand = 'exitCommand',
  exitKeyword_1 = 'exitKeyword_1',
  exitKeyword_2 = 'exitKeyword_2',
  helpKeyword_1 = 'helpKeyword_1',
  helpKeyword_2 = 'helpKeyword_2',
  helpCommand_1 = 'helpCommand_1',
  helpCommand_2 = 'helpCommand_2',
  commandName_1 = 'commandName_1',
  commandName_2 = 'commandName_2',
  commandName_3 = 'commandName_3',
  commandName_4 = 'commandName_4',
  commandName_5 = 'commandName_5',
  commandName_6 = 'commandName_6',
  commandName_7 = 'commandName_7',
  commandName_8 = 'commandName_8',
  move_1 = 'move_1',
  move_2 = 'move_2',
  exit_1 = 'exit_1',
  exit_2 = 'exit_2',
  exit_3 = 'exit_3',
  take_1 = 'take_1',
  take_2 = 'take_2',
  drop_1 = 'drop_1',
  drop_2 = 'drop_2',
  say_1 = 'say_1',
  say_2 = 'say_2',
  inventory_1 = 'inventory_1',
  inventory_2 = 'inventory_2',
  whisper_1 = 'whisper_1',
  whisper_2 = 'whisper_2',
  look = 'look',
  help = 'help',
  item = 'item',
  moveCommand = 'moveCommand',
  moveKeyword_1 = 'moveKeyword_1',
  moveKeyword_2 = 'moveKeyword_2',
}
export type start = commands;
export type commands =
  | commands_1
  | commands_2
  | commands_3
  | commands_4
  | commands_5
  | commands_6
  | commands_7
  | commands_8
  | commands_9;
export type commands_1 = moveCommand;
export type commands_2 = helpCommand;
export type commands_3 = exitCommand;
export type commands_4 = inventoryCommand;
export type commands_5 = sayCommand;
export type commands_6 = whisperCommand;
export type commands_7 = lookCommand;
export type commands_8 = takeCommand;
export type commands_9 = dropCommand;
export type space = string;
export class dropCommand {
  public kind: ASTKinds.dropCommand = ASTKinds.dropCommand;
  public dropKeyword: dropKeyword;
  public text: word;
  public command: DropCommand;
  constructor(dropKeyword: dropKeyword, text: word) {
    this.dropKeyword = dropKeyword;
    this.text = text;
    this.command = ((): DropCommand => {
      return new DropCommand(text);
    })();
  }
}
export type dropKeyword = string;
export class takeCommand {
  public kind: ASTKinds.takeCommand = ASTKinds.takeCommand;
  public takeKeyword: takeKeyword;
  public text: word;
  public command: TakeCommand;
  constructor(takeKeyword: takeKeyword, text: word) {
    this.takeKeyword = takeKeyword;
    this.text = text;
    this.command = ((): TakeCommand => {
      return new TakeCommand(text);
    })();
  }
}
export type takeKeyword = string;
export type lookCommand = lookCommand_1 | lookCommand_2;
export class lookCommand_1 {
  public kind: ASTKinds.lookCommand_1 = ASTKinds.lookCommand_1;
  public lookKeyword: lookKeyword;
  public text: word;
  public command: LookCommand;
  constructor(lookKeyword: lookKeyword, text: word) {
    this.lookKeyword = lookKeyword;
    this.text = text;
    this.command = ((): LookCommand => {
      return new LookCommand(text);
    })();
  }
}
export class lookCommand_2 {
  public kind: ASTKinds.lookCommand_2 = ASTKinds.lookCommand_2;
  public lookKeyword: lookKeyword;
  public command: LookCommand;
  constructor(lookKeyword: lookKeyword) {
    this.lookKeyword = lookKeyword;
    this.command = ((): LookCommand => {
      return new LookCommand('');
    })();
  }
}
export type lookKeyword = string;
export class whisperCommand {
  public kind: ASTKinds.whisperCommand = ASTKinds.whisperCommand;
  public whisperKeyword: whisperKeyword;
  public username: oneWord;
  public text: word;
  public command: WhisperCommand;
  constructor(whisperKeyword: whisperKeyword, username: oneWord, text: word) {
    this.whisperKeyword = whisperKeyword;
    this.username = username;
    this.text = text;
    this.command = ((): WhisperCommand => {
      return new WhisperCommand(text, username);
    })();
  }
}
export type whisperKeyword = whisperKeyword_1 | whisperKeyword_2;
export type whisperKeyword_1 = string;
export type whisperKeyword_2 = string;
export type word = string;
export type oneWord = string;
export class sayCommand {
  public kind: ASTKinds.sayCommand = ASTKinds.sayCommand;
  public sayKeyword: sayKeyword;
  public text: word;
  public command: SayCommand;
  constructor(sayKeyword: sayKeyword, text: word) {
    this.sayKeyword = sayKeyword;
    this.text = text;
    this.command = ((): SayCommand => {
      return new SayCommand(text);
    })();
  }
}
export type sayKeyword = sayKeyword_1 | sayKeyword_2;
export type sayKeyword_1 = string;
export type sayKeyword_2 = string;
export class inventoryCommand {
  public kind: ASTKinds.inventoryCommand = ASTKinds.inventoryCommand;
  public inventoryKeyword: inventoryKeyword;
  public command: InventoryCommand;
  constructor(inventoryKeyword: inventoryKeyword) {
    this.inventoryKeyword = inventoryKeyword;
    this.command = ((): InventoryCommand => {
      return new InventoryCommand();
    })();
  }
}
export type inventoryKeyword = inventoryKeyword_1 | inventoryKeyword_2;
export type inventoryKeyword_1 = string;
export type inventoryKeyword_2 = string;
export class exitCommand {
  public kind: ASTKinds.exitCommand = ASTKinds.exitCommand;
  public exitKeyword: exitKeyword;
  public command: ExitCommand;
  constructor(exitKeyword: exitKeyword) {
    this.exitKeyword = exitKeyword;
    this.command = ((): ExitCommand => {
      return new ExitCommand();
    })();
  }
}
export type exitKeyword = exitKeyword_1 | exitKeyword_2;
export type exitKeyword_1 = string;
export type exitKeyword_2 = string;
export type helpKeyword = helpKeyword_1 | helpKeyword_2;
export type helpKeyword_1 = string;
export type helpKeyword_2 = string;
export type helpCommand = helpCommand_1 | helpCommand_2;
export class helpCommand_1 {
  public kind: ASTKinds.helpCommand_1 = ASTKinds.helpCommand_1;
  public commandName: commandName;
  public command: HelpCommand;
  constructor(commandName: commandName) {
    this.commandName = commandName;
    this.command = ((): HelpCommand => {
      return new HelpCommand(this.commandName.value);
    })();
  }
}
export class helpCommand_2 {
  public kind: ASTKinds.helpCommand_2 = ASTKinds.helpCommand_2;
  public commandName: commandName;
  public command: HelpCommand;
  constructor(commandName: commandName) {
    this.commandName = commandName;
    this.command = ((): HelpCommand => {
      return new HelpCommand(this.commandName.value);
    })();
  }
}
export type commandName =
  | commandName_1
  | commandName_2
  | commandName_3
  | commandName_4
  | commandName_5
  | commandName_6
  | commandName_7
  | commandName_8;
export type commandName_1 = move;
export type commandName_2 = exit;
export type commandName_3 = take;
export type commandName_4 = drop;
export type commandName_5 = say;
export type commandName_6 = inventory;
export type commandName_7 = whisper;
export type commandName_8 = help;
export type move = move_1 | move_2;
export class move_1 {
  public kind: ASTKinds.move_1 = ASTKinds.move_1;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.MOVE;
    })();
  }
}
export class move_2 {
  public kind: ASTKinds.move_2 = ASTKinds.move_2;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.MOVE;
    })();
  }
}
export type exit = exit_1 | exit_2 | exit_3;
export class exit_1 {
  public kind: ASTKinds.exit_1 = ASTKinds.exit_1;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.EXIT;
    })();
  }
}
export class exit_2 {
  public kind: ASTKinds.exit_2 = ASTKinds.exit_2;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.EXIT;
    })();
  }
}
export class exit_3 {
  public kind: ASTKinds.exit_3 = ASTKinds.exit_3;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.EXIT;
    })();
  }
}
export type take = take_1 | take_2;
export class take_1 {
  public kind: ASTKinds.take_1 = ASTKinds.take_1;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.TAKE;
    })();
  }
}
export class take_2 {
  public kind: ASTKinds.take_2 = ASTKinds.take_2;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.TAKE;
    })();
  }
}
export type drop = drop_1 | drop_2;
export class drop_1 {
  public kind: ASTKinds.drop_1 = ASTKinds.drop_1;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.DROP;
    })();
  }
}
export class drop_2 {
  public kind: ASTKinds.drop_2 = ASTKinds.drop_2;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.DROP;
    })();
  }
}
export type say = say_1 | say_2;
export class say_1 {
  public kind: ASTKinds.say_1 = ASTKinds.say_1;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.SAY;
    })();
  }
}
export class say_2 {
  public kind: ASTKinds.say_2 = ASTKinds.say_2;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.SAY;
    })();
  }
}
export type inventory = inventory_1 | inventory_2;
export class inventory_1 {
  public kind: ASTKinds.inventory_1 = ASTKinds.inventory_1;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.INVENTORY;
    })();
  }
}
export class inventory_2 {
  public kind: ASTKinds.inventory_2 = ASTKinds.inventory_2;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.INVENTORY;
    })();
  }
}
export type whisper = whisper_1 | whisper_2;
export class whisper_1 {
  public kind: ASTKinds.whisper_1 = ASTKinds.whisper_1;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.WHISPER;
    })();
  }
}
export class whisper_2 {
  public kind: ASTKinds.whisper_2 = ASTKinds.whisper_2;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.WHISPER;
    })();
  }
}
export class look {
  public kind: ASTKinds.look = ASTKinds.look;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.LOOK;
    })();
  }
}
export class help {
  public kind: ASTKinds.help = ASTKinds.help;
  public text: string;
  public value: CommandName;
  constructor(text: string) {
    this.text = text;
    this.value = ((): CommandName => {
      return CommandName.HELP;
    })();
  }
}
export class item {
  public kind: ASTKinds.item = ASTKinds.item;
  public text: string;
  public value: Item;
  constructor(text: string) {
    this.text = text;
    this.value = ((): Item => {
      return Item.ITEM_TEST;
    })();
  }
}
export class moveCommand {
  public kind: ASTKinds.moveCommand = ASTKinds.moveCommand;
  public text: word;
  public command: MoveCommand;
  constructor(text: word) {
    this.text = text;
    this.command = ((): MoveCommand => {
      return new MoveCommand(text);
    })();
  }
}
export type moveKeyword = moveKeyword_1 | moveKeyword_2;
export type moveKeyword_1 = string;
export type moveKeyword_2 = string;
export class Parser {
  private readonly input: string;
  private pos: PosInfo;
  private negating: boolean = false;
  private memoSafe: boolean = true;
  constructor(input: string) {
    this.pos = { overallPos: 0, line: 1, offset: 0 };
    this.input = input;
  }
  public reset(pos: PosInfo) {
    this.pos = pos;
  }
  public finished(): boolean {
    return this.pos.overallPos === this.input.length;
  }
  public clearMemos(): void {}
  public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
    return this.matchcommands($$dpth + 1, $$cr);
  }
  public matchcommands(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commands> {
    return this.choice<commands>([
      () => this.matchcommands_1($$dpth + 1, $$cr),
      () => this.matchcommands_2($$dpth + 1, $$cr),
      () => this.matchcommands_3($$dpth + 1, $$cr),
      () => this.matchcommands_4($$dpth + 1, $$cr),
      () => this.matchcommands_5($$dpth + 1, $$cr),
      () => this.matchcommands_6($$dpth + 1, $$cr),
      () => this.matchcommands_7($$dpth + 1, $$cr),
      () => this.matchcommands_8($$dpth + 1, $$cr),
      () => this.matchcommands_9($$dpth + 1, $$cr),
    ]);
  }
  public matchcommands_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commands_1> {
    return this.matchmoveCommand($$dpth + 1, $$cr);
  }
  public matchcommands_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commands_2> {
    return this.matchhelpCommand($$dpth + 1, $$cr);
  }
  public matchcommands_3(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commands_3> {
    return this.matchexitCommand($$dpth + 1, $$cr);
  }
  public matchcommands_4(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commands_4> {
    return this.matchinventoryCommand($$dpth + 1, $$cr);
  }
  public matchcommands_5(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commands_5> {
    return this.matchsayCommand($$dpth + 1, $$cr);
  }
  public matchcommands_6(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commands_6> {
    return this.matchwhisperCommand($$dpth + 1, $$cr);
  }
  public matchcommands_7(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commands_7> {
    return this.matchlookCommand($$dpth + 1, $$cr);
  }
  public matchcommands_8(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commands_8> {
    return this.matchtakeCommand($$dpth + 1, $$cr);
  }
  public matchcommands_9(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commands_9> {
    return this.matchdropCommand($$dpth + 1, $$cr);
  }
  public matchspace($$dpth: number, $$cr?: ErrorTracker): Nullable<space> {
    return this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr);
  }
  public matchdropCommand(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<dropCommand> {
    return this.run<dropCommand>($$dpth, () => {
      let $scope$dropKeyword: Nullable<dropKeyword>;
      let $scope$text: Nullable<word>;
      let $$res: Nullable<dropCommand> = null;
      if (
        true &&
        ($scope$dropKeyword = this.matchdropKeyword($$dpth + 1, $$cr)) !==
          null &&
        this.matchspace($$dpth + 1, $$cr) !== null &&
        ($scope$text = this.matchword($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new dropCommand($scope$dropKeyword, $scope$text);
      }
      return $$res;
    });
  }
  public matchdropKeyword(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<dropKeyword> {
    return this.regexAccept(String.raw`(?:drop)`, $$dpth + 1, $$cr);
  }
  public matchtakeCommand(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<takeCommand> {
    return this.run<takeCommand>($$dpth, () => {
      let $scope$takeKeyword: Nullable<takeKeyword>;
      let $scope$text: Nullable<word>;
      let $$res: Nullable<takeCommand> = null;
      if (
        true &&
        ($scope$takeKeyword = this.matchtakeKeyword($$dpth + 1, $$cr)) !==
          null &&
        this.matchspace($$dpth + 1, $$cr) !== null &&
        ($scope$text = this.matchword($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new takeCommand($scope$takeKeyword, $scope$text);
      }
      return $$res;
    });
  }
  public matchtakeKeyword(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<takeKeyword> {
    return this.regexAccept(String.raw`(?:take)`, $$dpth + 1, $$cr);
  }
  public matchlookCommand(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<lookCommand> {
    return this.choice<lookCommand>([
      () => this.matchlookCommand_1($$dpth + 1, $$cr),
      () => this.matchlookCommand_2($$dpth + 1, $$cr),
    ]);
  }
  public matchlookCommand_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<lookCommand_1> {
    return this.run<lookCommand_1>($$dpth, () => {
      let $scope$lookKeyword: Nullable<lookKeyword>;
      let $scope$text: Nullable<word>;
      let $$res: Nullable<lookCommand_1> = null;
      if (
        true &&
        ($scope$lookKeyword = this.matchlookKeyword($$dpth + 1, $$cr)) !==
          null &&
        this.matchspace($$dpth + 1, $$cr) !== null &&
        ($scope$text = this.matchword($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new lookCommand_1($scope$lookKeyword, $scope$text);
      }
      return $$res;
    });
  }
  public matchlookCommand_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<lookCommand_2> {
    return this.run<lookCommand_2>($$dpth, () => {
      let $scope$lookKeyword: Nullable<lookKeyword>;
      let $$res: Nullable<lookCommand_2> = null;
      if (
        true &&
        ($scope$lookKeyword = this.matchlookKeyword($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new lookCommand_2($scope$lookKeyword);
      }
      return $$res;
    });
  }
  public matchlookKeyword(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<lookKeyword> {
    return this.regexAccept(String.raw`(?:look)`, $$dpth + 1, $$cr);
  }
  public matchwhisperCommand(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<whisperCommand> {
    return this.run<whisperCommand>($$dpth, () => {
      let $scope$whisperKeyword: Nullable<whisperKeyword>;
      let $scope$username: Nullable<oneWord>;
      let $scope$text: Nullable<word>;
      let $$res: Nullable<whisperCommand> = null;
      if (
        true &&
        ($scope$whisperKeyword = this.matchwhisperKeyword($$dpth + 1, $$cr)) !==
          null &&
        this.matchspace($$dpth + 1, $$cr) !== null &&
        ($scope$username = this.matchoneWord($$dpth + 1, $$cr)) !== null &&
        this.matchspace($$dpth + 1, $$cr) !== null &&
        ($scope$text = this.matchword($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new whisperCommand(
          $scope$whisperKeyword,
          $scope$username,
          $scope$text
        );
      }
      return $$res;
    });
  }
  public matchwhisperKeyword(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<whisperKeyword> {
    return this.choice<whisperKeyword>([
      () => this.matchwhisperKeyword_1($$dpth + 1, $$cr),
      () => this.matchwhisperKeyword_2($$dpth + 1, $$cr),
    ]);
  }
  public matchwhisperKeyword_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<whisperKeyword_1> {
    return this.regexAccept(String.raw`(?:whisper)`, $$dpth + 1, $$cr);
  }
  public matchwhisperKeyword_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<whisperKeyword_2> {
    return this.regexAccept(String.raw`(?:w)`, $$dpth + 1, $$cr);
  }
  public matchword($$dpth: number, $$cr?: ErrorTracker): Nullable<word> {
    return this.regexAccept(String.raw`(?:.+)`, $$dpth + 1, $$cr);
  }
  public matchoneWord($$dpth: number, $$cr?: ErrorTracker): Nullable<oneWord> {
    return this.regexAccept(String.raw`(?:\S+)`, $$dpth + 1, $$cr);
  }
  public matchsayCommand(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<sayCommand> {
    return this.run<sayCommand>($$dpth, () => {
      let $scope$sayKeyword: Nullable<sayKeyword>;
      let $scope$text: Nullable<word>;
      let $$res: Nullable<sayCommand> = null;
      if (
        true &&
        ($scope$sayKeyword = this.matchsayKeyword($$dpth + 1, $$cr)) !== null &&
        this.matchspace($$dpth + 1, $$cr) !== null &&
        ($scope$text = this.matchword($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new sayCommand($scope$sayKeyword, $scope$text);
      }
      return $$res;
    });
  }
  public matchsayKeyword(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<sayKeyword> {
    return this.choice<sayKeyword>([
      () => this.matchsayKeyword_1($$dpth + 1, $$cr),
      () => this.matchsayKeyword_2($$dpth + 1, $$cr),
    ]);
  }
  public matchsayKeyword_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<sayKeyword_1> {
    return this.regexAccept(String.raw`(?:say)`, $$dpth + 1, $$cr);
  }
  public matchsayKeyword_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<sayKeyword_2> {
    return this.regexAccept(String.raw`(?:s)`, $$dpth + 1, $$cr);
  }
  public matchinventoryCommand(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<inventoryCommand> {
    return this.run<inventoryCommand>($$dpth, () => {
      let $scope$inventoryKeyword: Nullable<inventoryKeyword>;
      let $$res: Nullable<inventoryCommand> = null;
      if (
        true &&
        ($scope$inventoryKeyword = this.matchinventoryKeyword(
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new inventoryCommand($scope$inventoryKeyword);
      }
      return $$res;
    });
  }
  public matchinventoryKeyword(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<inventoryKeyword> {
    return this.choice<inventoryKeyword>([
      () => this.matchinventoryKeyword_1($$dpth + 1, $$cr),
      () => this.matchinventoryKeyword_2($$dpth + 1, $$cr),
    ]);
  }
  public matchinventoryKeyword_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<inventoryKeyword_1> {
    return this.regexAccept(String.raw`(?:inventory)`, $$dpth + 1, $$cr);
  }
  public matchinventoryKeyword_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<inventoryKeyword_2> {
    return this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr);
  }
  public matchexitCommand(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<exitCommand> {
    return this.run<exitCommand>($$dpth, () => {
      let $scope$exitKeyword: Nullable<exitKeyword>;
      let $$res: Nullable<exitCommand> = null;
      if (
        true &&
        ($scope$exitKeyword = this.matchexitKeyword($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new exitCommand($scope$exitKeyword);
      }
      return $$res;
    });
  }
  public matchexitKeyword(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<exitKeyword> {
    return this.choice<exitKeyword>([
      () => this.matchexitKeyword_1($$dpth + 1, $$cr),
      () => this.matchexitKeyword_2($$dpth + 1, $$cr),
    ]);
  }
  public matchexitKeyword_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<exitKeyword_1> {
    return this.regexAccept(String.raw`(?:exit)`, $$dpth + 1, $$cr);
  }
  public matchexitKeyword_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<exitKeyword_2> {
    return this.regexAccept(String.raw`(?:exits)`, $$dpth + 1, $$cr);
  }
  public matchhelpKeyword(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<helpKeyword> {
    return this.choice<helpKeyword>([
      () => this.matchhelpKeyword_1($$dpth + 1, $$cr),
      () => this.matchhelpKeyword_2($$dpth + 1, $$cr),
    ]);
  }
  public matchhelpKeyword_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<helpKeyword_1> {
    return this.regexAccept(String.raw`(?:help)`, $$dpth + 1, $$cr);
  }
  public matchhelpKeyword_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<helpKeyword_2> {
    return this.regexAccept(String.raw`(?:h)`, $$dpth + 1, $$cr);
  }
  public matchhelpCommand(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<helpCommand> {
    return this.choice<helpCommand>([
      () => this.matchhelpCommand_1($$dpth + 1, $$cr),
      () => this.matchhelpCommand_2($$dpth + 1, $$cr),
    ]);
  }
  public matchhelpCommand_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<helpCommand_1> {
    return this.run<helpCommand_1>($$dpth, () => {
      let $scope$commandName: Nullable<commandName>;
      let $$res: Nullable<helpCommand_1> = null;
      if (
        true &&
        this.matchhelpKeyword($$dpth + 1, $$cr) !== null &&
        this.matchspace($$dpth + 1, $$cr) !== null &&
        ($scope$commandName = this.matchcommandName($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new helpCommand_1($scope$commandName);
      }
      return $$res;
    });
  }
  public matchhelpCommand_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<helpCommand_2> {
    return this.run<helpCommand_2>($$dpth, () => {
      let $scope$commandName: Nullable<commandName>;
      let $$res: Nullable<helpCommand_2> = null;
      if (
        true &&
        this.matchhelpKeyword($$dpth + 1, $$cr) !== null &&
        ($scope$commandName = this.matchcommandName($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new helpCommand_2($scope$commandName);
      }
      return $$res;
    });
  }
  public matchcommandName(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commandName> {
    return this.choice<commandName>([
      () => this.matchcommandName_1($$dpth + 1, $$cr),
      () => this.matchcommandName_2($$dpth + 1, $$cr),
      () => this.matchcommandName_3($$dpth + 1, $$cr),
      () => this.matchcommandName_4($$dpth + 1, $$cr),
      () => this.matchcommandName_5($$dpth + 1, $$cr),
      () => this.matchcommandName_6($$dpth + 1, $$cr),
      () => this.matchcommandName_7($$dpth + 1, $$cr),
      () => this.matchcommandName_8($$dpth + 1, $$cr),
    ]);
  }
  public matchcommandName_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commandName_1> {
    return this.matchmove($$dpth + 1, $$cr);
  }
  public matchcommandName_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commandName_2> {
    return this.matchexit($$dpth + 1, $$cr);
  }
  public matchcommandName_3(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commandName_3> {
    return this.matchtake($$dpth + 1, $$cr);
  }
  public matchcommandName_4(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commandName_4> {
    return this.matchdrop($$dpth + 1, $$cr);
  }
  public matchcommandName_5(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commandName_5> {
    return this.matchsay($$dpth + 1, $$cr);
  }
  public matchcommandName_6(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commandName_6> {
    return this.matchinventory($$dpth + 1, $$cr);
  }
  public matchcommandName_7(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commandName_7> {
    return this.matchwhisper($$dpth + 1, $$cr);
  }
  public matchcommandName_8(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<commandName_8> {
    return this.matchhelp($$dpth + 1, $$cr);
  }
  public matchmove($$dpth: number, $$cr?: ErrorTracker): Nullable<move> {
    return this.choice<move>([
      () => this.matchmove_1($$dpth + 1, $$cr),
      () => this.matchmove_2($$dpth + 1, $$cr),
    ]);
  }
  public matchmove_1($$dpth: number, $$cr?: ErrorTracker): Nullable<move_1> {
    return this.run<move_1>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<move_1> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:move)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new move_1($scope$text);
      }
      return $$res;
    });
  }
  public matchmove_2($$dpth: number, $$cr?: ErrorTracker): Nullable<move_2> {
    return this.run<move_2>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<move_2> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:m)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new move_2($scope$text);
      }
      return $$res;
    });
  }
  public matchexit($$dpth: number, $$cr?: ErrorTracker): Nullable<exit> {
    return this.choice<exit>([
      () => this.matchexit_1($$dpth + 1, $$cr),
      () => this.matchexit_2($$dpth + 1, $$cr),
      () => this.matchexit_3($$dpth + 1, $$cr),
    ]);
  }
  public matchexit_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exit_1> {
    return this.run<exit_1>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<exit_1> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:exit)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new exit_1($scope$text);
      }
      return $$res;
    });
  }
  public matchexit_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exit_2> {
    return this.run<exit_2>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<exit_2> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:exits)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new exit_2($scope$text);
      }
      return $$res;
    });
  }
  public matchexit_3($$dpth: number, $$cr?: ErrorTracker): Nullable<exit_3> {
    return this.run<exit_3>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<exit_3> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:e)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new exit_3($scope$text);
      }
      return $$res;
    });
  }
  public matchtake($$dpth: number, $$cr?: ErrorTracker): Nullable<take> {
    return this.choice<take>([
      () => this.matchtake_1($$dpth + 1, $$cr),
      () => this.matchtake_2($$dpth + 1, $$cr),
    ]);
  }
  public matchtake_1($$dpth: number, $$cr?: ErrorTracker): Nullable<take_1> {
    return this.run<take_1>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<take_1> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:take)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new take_1($scope$text);
      }
      return $$res;
    });
  }
  public matchtake_2($$dpth: number, $$cr?: ErrorTracker): Nullable<take_2> {
    return this.run<take_2>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<take_2> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:t)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new take_2($scope$text);
      }
      return $$res;
    });
  }
  public matchdrop($$dpth: number, $$cr?: ErrorTracker): Nullable<drop> {
    return this.choice<drop>([
      () => this.matchdrop_1($$dpth + 1, $$cr),
      () => this.matchdrop_2($$dpth + 1, $$cr),
    ]);
  }
  public matchdrop_1($$dpth: number, $$cr?: ErrorTracker): Nullable<drop_1> {
    return this.run<drop_1>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<drop_1> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:drop)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new drop_1($scope$text);
      }
      return $$res;
    });
  }
  public matchdrop_2($$dpth: number, $$cr?: ErrorTracker): Nullable<drop_2> {
    return this.run<drop_2>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<drop_2> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:d)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new drop_2($scope$text);
      }
      return $$res;
    });
  }
  public matchsay($$dpth: number, $$cr?: ErrorTracker): Nullable<say> {
    return this.choice<say>([
      () => this.matchsay_1($$dpth + 1, $$cr),
      () => this.matchsay_2($$dpth + 1, $$cr),
    ]);
  }
  public matchsay_1($$dpth: number, $$cr?: ErrorTracker): Nullable<say_1> {
    return this.run<say_1>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<say_1> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:say)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new say_1($scope$text);
      }
      return $$res;
    });
  }
  public matchsay_2($$dpth: number, $$cr?: ErrorTracker): Nullable<say_2> {
    return this.run<say_2>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<say_2> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:s)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new say_2($scope$text);
      }
      return $$res;
    });
  }
  public matchinventory(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<inventory> {
    return this.choice<inventory>([
      () => this.matchinventory_1($$dpth + 1, $$cr),
      () => this.matchinventory_2($$dpth + 1, $$cr),
    ]);
  }
  public matchinventory_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<inventory_1> {
    return this.run<inventory_1>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<inventory_1> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:inventory)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new inventory_1($scope$text);
      }
      return $$res;
    });
  }
  public matchinventory_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<inventory_2> {
    return this.run<inventory_2>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<inventory_2> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:i)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new inventory_2($scope$text);
      }
      return $$res;
    });
  }
  public matchwhisper($$dpth: number, $$cr?: ErrorTracker): Nullable<whisper> {
    return this.choice<whisper>([
      () => this.matchwhisper_1($$dpth + 1, $$cr),
      () => this.matchwhisper_2($$dpth + 1, $$cr),
    ]);
  }
  public matchwhisper_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<whisper_1> {
    return this.run<whisper_1>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<whisper_1> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:whisper)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new whisper_1($scope$text);
      }
      return $$res;
    });
  }
  public matchwhisper_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<whisper_2> {
    return this.run<whisper_2>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<whisper_2> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:w)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new whisper_2($scope$text);
      }
      return $$res;
    });
  }
  public matchlook($$dpth: number, $$cr?: ErrorTracker): Nullable<look> {
    return this.run<look>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<look> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:look)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new look($scope$text);
      }
      return $$res;
    });
  }
  public matchhelp($$dpth: number, $$cr?: ErrorTracker): Nullable<help> {
    return this.run<help>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<help> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(String.raw`(?:)`, $$dpth + 1, $$cr)) !==
          null
      ) {
        $$res = new help($scope$text);
      }
      return $$res;
    });
  }
  public matchitem($$dpth: number, $$cr?: ErrorTracker): Nullable<item> {
    return this.run<item>($$dpth, () => {
      let $scope$text: Nullable<string>;
      let $$res: Nullable<item> = null;
      if (
        true &&
        ($scope$text = this.regexAccept(
          String.raw`(?:test)`,
          $$dpth + 1,
          $$cr
        )) !== null
      ) {
        $$res = new item($scope$text);
      }
      return $$res;
    });
  }
  public matchmoveCommand(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<moveCommand> {
    return this.run<moveCommand>($$dpth, () => {
      let $scope$text: Nullable<word>;
      let $$res: Nullable<moveCommand> = null;
      if (
        true &&
        this.matchmoveKeyword($$dpth + 1, $$cr) !== null &&
        this.matchspace($$dpth + 1, $$cr) !== null &&
        ($scope$text = this.matchword($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new moveCommand($scope$text);
      }
      return $$res;
    });
  }
  public matchmoveKeyword(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<moveKeyword> {
    return this.choice<moveKeyword>([
      () => this.matchmoveKeyword_1($$dpth + 1, $$cr),
      () => this.matchmoveKeyword_2($$dpth + 1, $$cr),
    ]);
  }
  public matchmoveKeyword_1(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<moveKeyword_1> {
    return this.regexAccept(String.raw`(?:move)`, $$dpth + 1, $$cr);
  }
  public matchmoveKeyword_2(
    $$dpth: number,
    $$cr?: ErrorTracker
  ): Nullable<moveKeyword_2> {
    return this.regexAccept(String.raw`(?:m)`, $$dpth + 1, $$cr);
  }
  public test(): boolean {
    const mrk = this.mark();
    const res = this.matchstart(0);
    const ans = res !== null;
    this.reset(mrk);
    return ans;
  }
  public parse(): ParseResult {
    const mrk = this.mark();
    const res = this.matchstart(0);
    if (res) return { ast: res, errs: [] };
    this.reset(mrk);
    const rec = new ErrorTracker();
    this.clearMemos();
    this.matchstart(0, rec);
    const err = rec.getErr();
    return { ast: res, errs: err !== null ? [err] : [] };
  }
  public mark(): PosInfo {
    return this.pos;
  }
  private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
    const mrk = this.mark();
    const res: T[] = [];
    for (;;) {
      const t = func();
      if (t === null) {
        break;
      }
      res.push(t);
    }
    if (star || res.length > 0) {
      return res;
    }
    this.reset(mrk);
    return null;
  }
  private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
    const mrk = this.mark();
    const res = fn();
    if (res !== null) return res;
    this.reset(mrk);
    return null;
  }
  private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
    for (const f of fns) {
      const res = f();
      if (res !== null) {
        return res;
      }
    }
    return null;
  }
  private regexAccept(
    match: string,
    dpth: number,
    cr?: ErrorTracker
  ): Nullable<string> {
    return this.run<string>(dpth, () => {
      const reg = new RegExp(match, 'y');
      const mrk = this.mark();
      reg.lastIndex = mrk.overallPos;
      const res = this.tryConsume(reg);
      if (cr) {
        cr.record(mrk, res, {
          kind: 'RegexMatch',
          // We substring from 3 to len - 1 to strip off the
          // non-capture group syntax added as a WebKit workaround
          literal: match.substring(3, match.length - 1),
          negated: this.negating,
        });
      }
      return res;
    });
  }
  private tryConsume(reg: RegExp): Nullable<string> {
    const res = reg.exec(this.input);
    if (res) {
      let lineJmp = 0;
      let lind = -1;
      for (let i = 0; i < res[0].length; ++i) {
        if (res[0][i] === '\n') {
          ++lineJmp;
          lind = i;
        }
      }
      this.pos = {
        overallPos: reg.lastIndex,
        line: this.pos.line + lineJmp,
        offset:
          lind === -1
            ? this.pos.offset + res[0].length
            : res[0].length - lind - 1,
      };
      return res[0];
    }
    return null;
  }
  private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
    const mrk = this.mark();
    const res = fn();
    this.reset(mrk);
    return res;
  }
  private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
    const mrk = this.mark();
    const oneg = this.negating;
    this.negating = !oneg;
    const res = fn();
    this.negating = oneg;
    this.reset(mrk);
    return res === null ? true : null;
  }
  private memoise<K>(
    rule: $$RuleType<K>,
    memo: Map<number, [Nullable<K>, PosInfo]>
  ): Nullable<K> {
    const $scope$pos = this.mark();
    const $scope$memoRes = memo.get($scope$pos.overallPos);
    if (this.memoSafe && $scope$memoRes !== undefined) {
      this.reset($scope$memoRes[1]);
      return $scope$memoRes[0];
    }
    const $scope$result = rule();
    if (this.memoSafe)
      memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
    return $scope$result;
  }
}
export function parse(s: string): ParseResult {
  const p = new Parser(s);
  return p.parse();
}
export interface ParseResult {
  ast: Nullable<start>;
  errs: SyntaxErr[];
}
export interface PosInfo {
  readonly overallPos: number;
  readonly line: number;
  readonly offset: number;
}
export interface RegexMatch {
  readonly kind: 'RegexMatch';
  readonly negated: boolean;
  readonly literal: string;
}
export type EOFMatch = { kind: 'EOF'; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
  public pos: PosInfo;
  public expmatches: MatchAttempt[];
  constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
    this.pos = pos;
    this.expmatches = [...expmatches];
  }
  public toString(): string {
    return `Syntax Error at line ${this.pos.line}:${
      this.pos.offset
    }. Expected one of ${this.expmatches.map(x =>
      x.kind === 'EOF' ? ' EOF' : ` ${x.negated ? 'not ' : ''}'${x.literal}'`
    )}`;
  }
}
class ErrorTracker {
  private mxpos: PosInfo = { overallPos: -1, line: -1, offset: -1 };
  private regexset: Set<string> = new Set();
  private pmatches: MatchAttempt[] = [];
  public record(pos: PosInfo, result: any, att: MatchAttempt) {
    if ((result === null) === att.negated) return;
    if (pos.overallPos > this.mxpos.overallPos) {
      this.mxpos = pos;
      this.pmatches = [];
      this.regexset.clear();
    }
    if (this.mxpos.overallPos === pos.overallPos) {
      if (att.kind === 'RegexMatch') {
        if (!this.regexset.has(att.literal)) this.pmatches.push(att);
        this.regexset.add(att.literal);
      } else {
        this.pmatches.push(att);
      }
    }
  }
  public getErr(): SyntaxErr | null {
    if (this.mxpos.overallPos !== -1)
      return new SyntaxErr(this.mxpos, this.pmatches);
    return null;
  }
}
